"use strict";(self.webpackChunkamperityfrontend=self.webpackChunkamperityfrontend||[]).push([[568],{568:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var s=n(834),o=n(123),a=n(135),l=n(33),r=n(986);const u={id:"amperityfrontend:plugin",autoStart:!0,requires:[s.IRetroShell,l.ICommandPalette,r.IDocumentManager],activate:(e,t,n,s,r)=>{const{shell:u,commands:i}=e;let d=!1;const p=new class{constructor(){this.items=[],this.counter=0,this.activeWaiting=!1}pushID(e){let t=this.counter;return this.counter++,this.items.push([t,e]),console.log("push"+String(t)),t}popID(e){this.items[0][0]===e&&(this.activeWaiting=this.items[0][1],this.items.shift(),console.log("pop"+String(e)))}async wait(e){for(;this.items[0][0]!==e||!0===this.activeWaiting;)await new Promise((e=>setTimeout(e,100)))}};var c;function _(){window.parent.postMessage({notebook_msg_type:"loading_status",loadingText:"Calculating metrics..."},"*"),e.commands.execute("notebook:run-all-cells").then((()=>{var t=document.querySelectorAll(".jp-OutputArea-output"),n=t[t.length-1];document.querySelectorAll(".jp-Toolbar")[0].remove();for(var s=document.querySelectorAll(".jp-Notebook-cell"),o=0;o<s.length;o++)null!=n.parentElement&&null!=n.parentElement.parentElement&&null!=n.parentElement.parentElement.parentElement&&s[o]!=n.parentElement.parentElement.parentElement.parentElement&&s[o].remove();document.querySelectorAll(".jp-Cell-inputArea")[0].remove(),document.querySelectorAll(".jp-OutputCollapser")[0].remove();var a=document.querySelectorAll(".jp-OutputArea-prompt");a[a.length-1].innerHTML="",document.querySelectorAll(".jp-NotebookPanel-notebook")[0].style.top="0px",document.getElementsByClassName("jp-OutputPrompt")[0].classList.remove("jp-OutputPrompt"),function t(){var n=document.getElementsByClassName("jp-enh-cell-toolbar");n&&n.length>0?(n[0].remove(),e.commands.execute("notebook:disable-output-scrolling")):window.setTimeout(t,50)}(),e.contextMenu.dispose(),window.parent.postMessage({notebook_msg_type:"finished_load"},"*")}))}document.getElementsByClassName("darkreader").length>0&&(e.commands.execute("apputils:change-theme",{theme:"JupyterLab Dark"}),null==(c=document.querySelector(":root"))||c.style.setProperty("--jp-editor-selected-focused-background","grey"),null==c||c.style.setProperty("--jp-editor-cursor-color","black")),null==(c=document.querySelector(":root"))||c.style.setProperty("--jp-notebook-toolbar-margin-bottom","0px"),window.onmessage=function(t){if("data"in t&&"object"==typeof t.data&&"notebookreact_msg_type"in t.data){var n=t.data.notebookreact_msg_type;if("startup_as_published"==n&&e.commands.execute("startup_as_published"),"startup_as_notebook"==n&&e.commands.execute("startup_as_notebook"),"sql_error"==n&&((o=document.getElementsByClassName("sqlstatus")[0].children[1]).value="Error: "+t.data.error,o.dispatchEvent(new Event("change",{bubbles:!0}))),"sql_results"==n){var o=document.getElementsByClassName("sqlstatus")[0].children[1],a=document.getElementsByClassName("sqldata")[0].children[1];o.value=t.data.status_text,a.value=t.data.csv_data,a.dispatchEvent(new Event("change",{bubbles:!0})),o.dispatchEvent(new Event("change",{bubbles:!0}))}"load_notebook"==n&&e.serviceManager.contents.save("default.ipynb",JSON.parse(String(t.data.file_json))).then((()=>{const t=s.contextForWidget(u.currentWidget);t?t.revert().then((()=>{e.serviceManager.kernelspecs.refreshSpecs(),d?window.setTimeout(_,500):window.parent.postMessage({notebook_msg_type:"finished_load"},"*")})):d?_():window.parent.postMessage({notebook_msg_type:"finished_load"},"*")})),"sql_request_from_cell"==n&&window.parent.postMessage({notebook_msg_type:"request_sql_query",sql_request:t.data.sql_request},"*"),"sql_finish_from_cell"==n&&(p.activeWaiting=!1)}},i.addCommand("sqltag",{label:"Run SQL",execute:()=>{if(e&&e.shell){let t=e.shell;if(t.currentWidget){let e=t.currentWidget;e.content&&e.content.activeCell&&("SQL"!=e.content.activeCell.model.metadata.get("tags")?e.content.activeCell.model.metadata.set("tags",["SQL"]):e.content.activeCell.model.metadata.set("tags",[]))}}}}),n.addItem({command:"sqltag",category:"amperity"}),null==(c=document.querySelector(":root"))||c.style.setProperty("--jp-notebook-max-width","100%"),i.addCommand("set_notebook_width",{label:"Set notebook width",execute:e=>{var t=document.querySelector(":root"),n=getComputedStyle(t);l.InputDialog.getText({title:"How wide should the cells be? (i.e. 2000px or 100%)",text:n.getPropertyValue("--jp-notebook-max-width")}).then((e=>{if(e.value){var t=document.querySelector(":root");null==t||t.style.setProperty("--jp-notebook-max-width",e.value)}})).catch(console.error)}}),n.addItem({command:"set_notebook_width",category:"amperity"}),i.addCommand("startup_as_notebook",{label:"Startup as notebook",execute:()=>{t.top.dispose(),t.menu.setHidden(!0),window.parent.postMessage({notebook_msg_type:"request_notebook"},"*")}}),n.addItem({command:"startup_as_notebook",category:"amperity"}),i.addCommand("startup_as_published",{label:"Startup as published",execute:()=>{d=!0,e.commands.execute("startup_as_notebook")}}),n.addItem({command:"startup_as_published",category:"amperity"}),function t(){var n;if(e&&e.shell&&e.shell.currentWidget){let t=e.shell.currentWidget;null===(n=s.contextForWidget(t))||void 0===n||n.fileChanged.connect(((t,n)=>{e.serviceManager.contents.get("default.ipynb",{content:!0}).then((e=>{for(var t=0;t<e.content.cells.length;t++)delete e.content.cells[t].outputs,delete e.content.cells[t].execution_count,delete e.content.cells[t].metadata.jupyter;let n=JSON.stringify(e);window.parent.postMessage({notebook_msg_type:"save_notebook",notebook:n},"*")}))}))}else window.setTimeout(t,200)}();let m=a.OutputArea.execute;o.NotebookActions.executionScheduled.connect(((e,t)=>{let n=t.cell.model.metadata.get("tags");a.OutputArea.execute=(e,t,s,o)=>{let l,r=!1;try{let u=e;if(n&&"SQL"==n)r=!0,u=`\n\n%pip install -q ipywidgets==8.0.6 ipydatagrid==1.1.15\nimport ipywidgets as widgets\nfrom ipydatagrid import DataGrid\nimport re\nimport pandas as pd\nimport asyncio\nfrom IPython.display import Javascript, clear_output\nfrom io import StringIO\n\nclass RunSQL:\n    def __init__(self, containing_box, optional_callback_with_status_df=False, event_to_set=False, should_show_results=True, needs_to_unblock=True):\n        self.containing_box = containing_box\n        self.optional_callback_with_status_df = optional_callback_with_status_df\n        self.event_to_set = event_to_set\n        self.should_show_results = should_show_results\n        self.needs_to_unblock = needs_to_unblock\n        \n    \n    def _reset(self):\n        if self.event_to_set:\n            self.event_to_set.clear()\n        operations_out = widgets.Output()\n        results_out = widgets.Output()  \n        self.containing_box.children = [operations_out, results_out]\n        sqlstatus = widgets.Textarea(\n            value='Pending',\n            placeholder='Type something',\n            description='String:',\n            disabled=False,\n        )\n        sqlstatus.layout.display='none'\n        sqlstatus.add_class('sqlstatus')\n        operations_out.append_display_data(sqlstatus)  \n\n        sqldata = widgets.Textarea(\n            value='',\n            placeholder='Type something',\n            description='String:',\n            disabled=False,\n        )\n        sqldata.layout.display='none'\n        sqldata.add_class('sqldata')\n        operations_out.append_display_data(sqldata)\n        if self.should_show_results:\n          results_out.append_stdout("Pending...")\n\n        def on_value_update(el):\n            sqlstatus_value = sqlstatus.value\n            sqldata_value = sqldata.value\n            df = ''\n            if not sqlstatus_value.startswith("Pending"):\n                if self.should_show_results:\n                    results_out.outputs = ()\n                    results_out.append_stdout(sqlstatus_value)\n                if not (sqlstatus_value.startswith('Error:') or sqlstatus_value.startswith("Pending")):\n                    df = pd.read_csv(StringIO(sqldata_value))\n                    if self.should_show_results:\n                        results_out.append_display_data(widgets.VBox([DataGrid(df, auto_fit_columns=True)]))\n                operations_out.outputs = ()\n                if self.optional_callback_with_status_df:\n                    self.optional_callback_with_status_df(sqlstatus_value, df)\n                if self.event_to_set:\n                    self.event_to_set.set()\n                if self.needs_to_unblock:\n                  js_command = '''\n                  window.postMessage(\n                  {\n                  notebookreact_msg_type: "sql_finish_from_cell", \n                  });\n                  '''\n                  self.containing_box.children[0].append_display_data(Javascript(js_command))  \n        sqlstatus.observe(on_value_update, names='value')\n        \n\n    def run_query(self, query):\n        self._reset()\n        query = re.sub(r'--(.*?)\\n','\\n',query)\n        query = query.replace('\\n', ' /* newline */ ').replace('\\\\', '\\\\\\\\')\n        js_command = '''\n        window.postMessage(\n        {\n        notebookreact_msg_type: "sql_request_from_cell", \n        sql_request:"'''+query+'''"\n        });\n        '''\n        self.containing_box.children[0].append_display_data(Javascript(js_command))  \n        \n    \noutput_for_sql = widgets.VBox()\ndef callback_for_sql(status, dfin):\n     global df\n     df = dfin\ndisplay(output_for_sql)\nsql_r = RunSQL(output_for_sql, callback_for_sql)\nsql_r.run_query("""${e}""")`;else{let d="\n%pip install -q requests==2.28.2 pygwalker=='0.1.7a5'\nimport pandas as pd\nimport pygwalker as pyg, pygwalker.utils.config as pyg_conf\npyg_conf.set_config({'privacy': 'offline'})\n";e.includes("import pyg")&&(u=d+u)}async function i(e,t,n,s){let o=p.pushID(r);return await p.wait(o),p.popID(o),m(e,t,n,s)}l=i(u,t,s,o)}catch(c){throw c}finally{a.OutputArea.execute=m}return l}})),window.parent.postMessage({notebook_msg_type:"jupyter_is_ready"},"*")}}}}]);