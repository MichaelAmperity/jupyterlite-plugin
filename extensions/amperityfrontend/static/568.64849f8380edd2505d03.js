"use strict";(self.webpackChunkamperityfrontend=self.webpackChunkamperityfrontend||[]).push([[568],{568:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var a=n(834),o=n(123),s=n(135),l=n(33),r=n(986);const u={id:"amperityfrontend:plugin",autoStart:!0,requires:[a.IRetroShell,l.ICommandPalette,r.IDocumentManager],activate:(e,t,n,a,r)=>{const{shell:u,commands:d}=e;let p=!1;var i;function c(){window.parent.postMessage({notebook_msg_type:"loading_status",loadingText:"Calculating metrics..."},"*"),e.commands.execute("notebook:run-all-cells").then((()=>{var t=document.querySelectorAll(".jp-OutputArea-output"),n=t[t.length-1];document.querySelectorAll(".jp-Toolbar")[0].remove();for(var a=document.querySelectorAll(".jp-Notebook-cell"),o=0;o<a.length;o++)null!=n.parentElement&&null!=n.parentElement.parentElement&&null!=n.parentElement.parentElement.parentElement&&a[o]!=n.parentElement.parentElement.parentElement.parentElement&&a[o].remove();document.querySelectorAll(".jp-Cell-inputArea")[0].remove(),document.querySelectorAll(".jp-OutputCollapser")[0].remove();var s=document.querySelectorAll(".jp-OutputArea-prompt");s[s.length-1].innerHTML="",document.querySelectorAll(".jp-NotebookPanel-notebook")[0].style.top="0px",document.getElementsByClassName("jp-OutputPrompt")[0].classList.remove("jp-OutputPrompt"),function t(){var n=document.getElementsByClassName("jp-enh-cell-toolbar");n&&n.length>0?(n[0].remove(),e.commands.execute("notebook:disable-output-scrolling")):window.setTimeout(t,50)}(),e.contextMenu.dispose(),window.parent.postMessage({notebook_msg_type:"finished_load"},"*")}))}document.getElementsByClassName("darkreader").length>0&&(e.commands.execute("apputils:change-theme",{theme:"JupyterLab Dark"}),null==(i=document.querySelector(":root"))||i.style.setProperty("--jp-editor-selected-focused-background","grey"),null==i||i.style.setProperty("--jp-editor-cursor-color","black")),window.onmessage=function(t){if("data"in t&&"object"==typeof t.data&&"notebookreact_msg_type"in t.data){var n=t.data.notebookreact_msg_type;if("startup_as_published"==n&&e.commands.execute("startup_as_published"),"startup_as_notebook"==n&&e.commands.execute("startup_as_notebook"),"sql_error"==n&&((o=document.getElementsByClassName("sqlstatus")[0].children[1]).value="Error: "+t.data.error,o.dispatchEvent(new Event("change",{bubbles:!0}))),"sql_results"==n){var o=document.getElementsByClassName("sqlstatus")[0].children[1],s=document.getElementsByClassName("sqldata")[0].children[1];o.value=t.data.status_text,s.value=t.data.csv_data,s.dispatchEvent(new Event("change",{bubbles:!0})),o.dispatchEvent(new Event("change",{bubbles:!0}))}"load_notebook"==n?e.serviceManager.contents.save("default.ipynb",JSON.parse(String(t.data.file_json))).then((()=>{const t=a.contextForWidget(u.currentWidget);t?t.revert().then((()=>{e.serviceManager.kernelspecs.refreshSpecs(),p?window.setTimeout(c,500):window.parent.postMessage({notebook_msg_type:"finished_load"},"*")})):p?c():window.parent.postMessage({notebook_msg_type:"finished_load"},"*")})):"sql_request_from_cell"==n&&window.parent.postMessage({notebook_msg_type:"request_sql_query",sql_request:t.data.sql_request},"*")}},d.addCommand("sqltag",{label:"Run SQL",execute:()=>{if(e&&e.shell){let t=e.shell;if(t.currentWidget){let e=t.currentWidget;e.content&&e.content.activeCell&&("SQL"!=e.content.activeCell.model.metadata.get("tags")?e.content.activeCell.model.metadata.set("tags",["SQL"]):e.content.activeCell.model.metadata.set("tags",[]))}}}}),n.addItem({command:"sqltag",category:"amperity"}),null==(i=document.querySelector(":root"))||i.style.setProperty("--jp-notebook-max-width","2000px"),d.addCommand("set_notebook_width",{label:"Set notebook width",execute:e=>{var t=document.querySelector(":root"),n=getComputedStyle(t);l.InputDialog.getText({title:"How wide should the cells be? (i.e. 2000px or 100%)",text:n.getPropertyValue("--jp-notebook-max-width")}).then((e=>{if(e.value){var t=document.querySelector(":root");null==t||t.style.setProperty("--jp-notebook-max-width",e.value)}})).catch(console.error)}}),n.addItem({command:"set_notebook_width",category:"amperity"}),d.addCommand("startup_as_notebook",{label:"Startup as notebook",execute:()=>{t.top.dispose(),t.menu.setHidden(!0),window.parent.postMessage({notebook_msg_type:"request_notebook"},"*")}}),n.addItem({command:"startup_as_notebook",category:"amperity"}),d.addCommand("startup_as_published",{label:"Startup as published",execute:()=>{p=!0,e.commands.execute("startup_as_notebook")}}),n.addItem({command:"startup_as_published",category:"amperity"}),function t(){var n;if(e&&e.shell&&e.shell.currentWidget){let t=e.shell.currentWidget;null===(n=a.contextForWidget(t))||void 0===n||n.fileChanged.connect(((t,n)=>{e.serviceManager.contents.get("default.ipynb",{content:!0}).then((e=>{for(var t=0;t<e.content.cells.length;t++)delete e.content.cells[t].outputs,delete e.content.cells[t].execution_count;let n=JSON.stringify(e);window.parent.postMessage({notebook_msg_type:"save_notebook",notebook:n},"*")}))}))}else window.setTimeout(t,200)}();let m=s.OutputArea.execute;o.NotebookActions.executionScheduled.connect(((e,t)=>{let n=t.cell.model.metadata.get("tags");s.OutputArea.execute=(e,t,a,o)=>{let l;try{let r=e;async function u(e,t,n,a){return await new Promise((e=>setTimeout(e,10))),m(e,t,n,a)}n&&"SQL"==n&&(r=`\n\n%pip install ipywidgets\nfrom ipywidgets import widgets\nimport re\nimport pandas as pd\nimport asyncio\nfrom IPython.display import Javascript, clear_output\nfrom io import StringIO\n\noperations_out = widgets.Output()\nresults_out = widgets.Output()\n\nsqldata_value = ""\nsqlstatus_value = ""\nsqlstatus = widgets.Textarea(\n    value='Pending',\n    placeholder='Type something',\n    description='String:',\n    disabled=False,\n)\nsqlstatus_value = "Pending"\nsqlstatus.layout.display='none'\nsqlstatus.add_class('sqlstatus')\noperations_out.append_display_data(sqlstatus)  \n\nsqldata = widgets.Textarea(\n    value='',\n    placeholder='Type something',\n    description='String:',\n    disabled=False,\n)\nsqldata_value = ""\nsqldata.layout.display='none'\nsqldata.add_class('sqldata')\noperations_out.append_display_data(sqldata)  \ndisplay(operations_out) \ndisplay(results_out) \n\n\ndef _gen_sql_request(query):\n    query = re.sub(r'--(.*?)\\n','\\n',query)\n    query = query.replace('\\n', ' /* newline */ ').replace('\\\\', '\\\\\\\\')\n    js_command = '''\n    window.postMessage(\n    {\n    notebookreact_msg_type: "sql_request_from_cell", \n    sql_request:"'''+query+'''"\n    });\n    '''\n    return js_command\n\ndef request_sql(query, output_widget):\n    js_command = _gen_sql_request(query)\n    output_widget.append_display_data(Javascript(js_command))  \n\ndef on_value_update(el):\n    global sql_df\n    sqlstatus_value = sqlstatus.value\n    sqldata_value = sqldata.value\n    if not sqlstatus_value.startswith("Pending"):\n        results_out.append_display_data(sqlstatus_value)  \n        if not (sqlstatus_value.startswith('Error:') or sqlstatus_value.startswith("Pending")):\n          sql_df = pd.read_csv(StringIO(sqldata_value))\n          results_out.append_display_data(sql_df)\n        operations_out = ()\n        # TODO update call that is done\nsqlstatus.observe(on_value_update, names='value')\n\n\nrequest_sql(query, operations_out)\nquery = """${e}"""\nawait _run_sql(query)`),l=u(r,t,a,o)}catch(d){throw d}finally{s.OutputArea.execute=m}return l}})),window.parent.postMessage({notebook_msg_type:"jupyter_is_ready"},"*")}}}}]);