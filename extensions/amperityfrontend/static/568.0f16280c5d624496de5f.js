"use strict";(self.webpackChunkamperityfrontend=self.webpackChunkamperityfrontend||[]).push([[568],{568:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var a=n(834),o=n(123),s=n(135),l=n(33),i=n(986);const r={id:"amperityfrontend:plugin",autoStart:!0,requires:[a.IRetroShell,l.ICommandPalette,i.IDocumentManager],activate:(e,t,n,a,i,r)=>{const{shell:p,commands:d}=e;let u=!1;class c{constructor(){this.items=[],this.counter=0,this.activeWaiting=!1}pushID(e){let t=this.counter;return this.counter++,this.items.push([t,e]),t}popID(e){this.items[0][0]===e&&(this.activeWaiting=this.items[0][1],this.items.shift())}async wait(e){for(;this.items[0][0]!==e||!0===this.activeWaiting;)await new Promise((e=>setTimeout(e,100)))}}let m=new c;var _;function h(){window.parent.postMessage({notebook_msg_type:"loading_status",loadingText:"Calculating metrics..."},"*"),e.commands.execute("notebook:run-all-cells").then((()=>{var t=document.querySelectorAll(".jp-OutputArea-output"),n=t[t.length-1];document.querySelectorAll(".jp-Toolbar")[0].remove();for(var a=document.querySelectorAll(".jp-Notebook-cell"),o=0;o<a.length;o++)null!=n.parentElement&&null!=n.parentElement.parentElement&&null!=n.parentElement.parentElement.parentElement&&a[o]!=n.parentElement.parentElement.parentElement.parentElement&&a[o].remove();document.querySelectorAll(".jp-Cell-inputArea")[0].remove(),document.querySelectorAll(".jp-OutputCollapser")[0].remove();var s=document.querySelectorAll(".jp-OutputArea-prompt");s[s.length-1].innerHTML="",document.querySelectorAll(".jp-NotebookPanel-notebook")[0].style.top="0px",document.getElementsByClassName("jp-OutputPrompt")[0].classList.remove("jp-OutputPrompt"),function t(){var n=document.getElementsByClassName("jp-enh-cell-toolbar");n&&n.length>0?(n[0].remove(),e.commands.execute("notebook:disable-output-scrolling")):window.setTimeout(t,50)}(),e.contextMenu.dispose(),window.parent.postMessage({notebook_msg_type:"finished_load"},"*")}))}document.getElementsByClassName("darkreader").length>0&&(e.commands.execute("apputils:change-theme",{theme:"JupyterLab Dark"}),null==(_=document.querySelector(":root"))||_.style.setProperty("--jp-editor-selected-focused-background","grey"),null==_||_.style.setProperty("--jp-editor-cursor-color","black")),null==(_=document.querySelector(":root"))||_.style.setProperty("--jp-notebook-toolbar-margin-bottom","0px"),window.onmessage=function(t){if("data"in t&&"object"==typeof t.data&&"notebookreact_msg_type"in t.data){var n=t.data.notebookreact_msg_type;if("startup_as_published"==n&&e.commands.execute("startup_as_published"),"startup_as_notebook"==n&&e.commands.execute("startup_as_notebook"),"sql_error"==n&&((o=document.getElementsByClassName("sqlstatus")[0].children[1]).value="Error: "+t.data.error,o.dispatchEvent(new Event("change",{bubbles:!0}))),"sql_results"==n){var o=document.getElementsByClassName("sqlstatus")[0].children[1],s=document.getElementsByClassName("sqldata")[0].children[1];o.value=t.data.status_text,s.value=t.data.csv_data,s.dispatchEvent(new Event("change",{bubbles:!0})),o.dispatchEvent(new Event("change",{bubbles:!0}))}"load_notebook"==n&&e.serviceManager.contents.save("default.ipynb",JSON.parse(String(t.data.file_json))).then((()=>{const e=a.contextForWidget(p.currentWidget);e?e.revert().then((()=>{u?window.setTimeout(h,500):window.parent.postMessage({notebook_msg_type:"finished_load"},"*")})):u?h():window.parent.postMessage({notebook_msg_type:"finished_load"},"*")})),"sql_request_from_cell"==n&&window.parent.postMessage({notebook_msg_type:"request_sql_query",sql_request:t.data.sql_request,download:t.data.download},"*"),"sql_finish_from_cell"==n&&(m.activeWaiting=!1)}},d.addCommand("sqltag",{label:"Run SQL",execute:()=>{if(e&&e.shell){let t=e.shell;if(t.currentWidget){let e=t.currentWidget;e.content&&e.content.activeCell&&("SQL"!=e.content.activeCell.model.metadata.get("tags")?e.content.activeCell.model.metadata.set("tags",["SQL"]):e.content.activeCell.model.metadata.set("tags",[]))}}}}),n.addItem({command:"sqltag",category:"amperity"}),null==(_=document.querySelector(":root"))||_.style.setProperty("--jp-notebook-max-width","100%"),d.addCommand("set_notebook_width",{label:"Set notebook width",execute:e=>{var t=document.querySelector(":root"),n=getComputedStyle(t);l.InputDialog.getText({title:"How wide should the cells be? (i.e. 2000px or 100%)",text:n.getPropertyValue("--jp-notebook-max-width")}).then((e=>{if(e.value){var t=document.querySelector(":root");null==t||t.style.setProperty("--jp-notebook-max-width",e.value)}})).catch(console.error)}}),n.addItem({command:"set_notebook_width",category:"amperity"}),d.addCommand("startup_as_notebook",{label:"Startup as notebook",execute:()=>{t.top.dispose(),t.menu.setHidden(!0),window.parent.postMessage({notebook_msg_type:"request_notebook"},"*")}}),n.addItem({command:"startup_as_notebook",category:"amperity"}),d.addCommand("startup_as_published",{label:"Startup as published",execute:()=>{u=!0,e.commands.execute("startup_as_notebook")}}),n.addItem({command:"startup_as_published",category:"amperity"}),function t(){var n;if(e&&e.shell&&e.shell.currentWidget){let t=e.shell.currentWidget;null===(n=a.contextForWidget(t))||void 0===n||n.fileChanged.connect(((t,n)=>{e.serviceManager.contents.get("default.ipynb",{content:!0}).then((e=>{for(var t=0;t<e.content.cells.length;t++)delete e.content.cells[t].outputs,delete e.content.cells[t].execution_count,delete e.content.cells[t].metadata.jupyter;let n=JSON.stringify(e);window.parent.postMessage({notebook_msg_type:"save_notebook",notebook:n},"*")}))}))}else window.setTimeout(t,200)}(),d.commandExecuted.connect(((e,t)=>{"kernelmenu:restart"!==t.id&&"runmenu:restart-and-run-all"!==t.id||(m=new c)}));let y=s.OutputArea.execute;o.NotebookActions.executionScheduled.connect(((e,t)=>{let n=t.cell.model.metadata.get("tags");s.OutputArea.execute=(e,t,a,o)=>{let l,i=!1;try{let r=e,p="\n%pip install -q ipywidgets==8.0.6 ipydatagrid==1.1.15 ipyvuetify==1.8.4 markdown==3.4.3\nimport markdown\nimport ipywidgets as widgets\nimport ipyvuetify as v\nfrom ipydatagrid import DataGrid\nimport re\nimport pandas as pd\nimport asyncio\nfrom IPython.display import Javascript, clear_output\nfrom io import StringIO\n\ndef amperity2():\n    t1 = \"Using Notebooks\"\n    c1 = '''\n### Overview\nThis analysis notebook is a way to visualize and dynamically explore the data in our databases. \nSQL queries will return data as a Pandas dataframe named 'df', for ease of manipulation in the python cells. \nBy default up to 1000 rows will be returned, but adding '!all' to the top of the query will allow up to 100,000 records to return.\nBecause the python and data is all running locally in the browser 100k is the max that is supported.\nThis makes this environment ideal for exploring data with SQL but not suited for doing ML or python data manipulation. \n    \n### Running cells\n- Ctrl-enter will run the current cell\n- Shift-enter will run the current cell and move to the next one\n\n### Kernal status\n- All the python code runs on a webworker, as the kernal. \n- The status is the circle in the top right. \n- 0, 0 restarts the kernel, clearing all data.\n\n### Saving\n- The notebook will save automatically every 5 secs\n- Cmd-s/ctrl-s also saves\n- The 'Auto-saved a few seconds ago' message in the top bar will be accurate\n\n### Edit and notebook modes\n- Esc will go from edit mode to notebook mode\n- Clicking or pressing enter will go to edit mode\n\nWhen in edit mode\n- Arrow keys to navigate\n- a, a  to add a cell above\n- b, b to add a cell below\n- d, d to delete a cell\n- You can also drag cells around when grabbing the left of the input cell\n\n### Tab complete and inspection\n- Press tab to get code suggestions\n- Press shift-tab when the cursor is on a function or variable to inspect info\n\n'''\n    \n    t2 =\"Running SQL\"\n    c2 = '''\n### SQL tags\n\nsql tag, toggle for current cell, view others\ndelete and run buttons\n\n### Working with results\n!all\ndf is dataframe\nresult is DataGrid\n    DataGrid(df[:5000], layout={ 'height' : '300px' }, auto_fit_columns = True)\"\"\"\na'''\n\n    t3 =\"Tableau-like Graph Builder\"\n    c3 = '''pyg.walk(df, dark='light')'''\n    \n    t4 =\"Charting libraries\"\n    c4 ='''### Importing\nUsing one of the following imports will automatically load the right version and do any nessary setup\n\n*cmd+click/ctrl+click to open links in new tab*    \n\n### Seaborn\n    import seaborn\nSeaborn is a better matplotlib, straightforward and quality graphs \n[seaborn docs](https://seaborn.pydata.org/examples/index.html)\n\n### IPYMPL\n    import ipympl\nImport this before Seaborn or Matplotlib to add zooming and interactivity automatically to them\n[ipympl docs](https://matplotlib.org/ipympl/examples/full-example.html)\n\n### Bokeh\n    import bokeh \nBokeh is a powerful and interactive library, that can be verbose.\nThis must be imported in a cell before your graphs\n[Bokeh docs](https://docs.bokeh.org/en/latest/docs/gallery.html)\n\n### Plotly\n    import plotly\nPlotly express is accessible as px, it is much like Bokeh.\n[plotly docs](https://plotly.com/python/plotly-fundamentals/)\n\n### Bqplot\n    import bqplot\nA very lightweight option\n[Bqplot docs](https://bqplot.github.io/bqplot/)\n\n### Altair\n    import altair\nAltair is a customizable, flexible graphing library\n(Altair docs)[https://altair-viz.github.io/gallery/index.html]\n\n### Ipycytoscape\n    import ipycytoscape\nThis is an option for node and tree style graphs\n[ipycytoscape](https://github.com/cytoscape/ipycytoscape)\n[parent cytoscape library](https://js.cytoscape.org/)\n    '''\n    \n    t5 =\"Publishing\"\n    c5 = \"\"\" \"\"\"\n    \n    t6 =\"Building dynamic widgets and apps\"\n    c6 = '''Besides just charts and dashboards, you can also create interactive, app-like experiences. Ipywidgets allow web uis to bind to python functions, \nipyvueify gives the capibility to style these widgets with the entire Vueify library, and functions have been provided for dynamically running our Presto SQL.\n\n\n\n    import ipywidgets\nThis will include all that is needed for interactions. 'v' will allows vue widget creation using Ipyvuetify.\n\n(ipywidgets)[https://ipywidgets.readthedocs.io/en/latest/index.html]\n\nipyvuetify\n[https://ipyvuetify.readthedocs.io/en/latest/usage.html]\n[https://v2.vuetifyjs.com/en/components/alerts/]\n\nThe following sample allows SQL to be entered in a textbox, which runs when the button is pressed\n\n    import ipywidgets\n    output_for_sql = widgets.VBox()\n    def callback_for_sql(status, df_in):\n         pass\n    display(output_for_sql)\n    sql_r = RunSQL(output_for_sql, callback_for_sql, event_to_set=False)\n    v.Btn()\n    sql_r.run_query(\"select * from Customer360 limit 10\")'''\n    \n    \n    panels = v.ExpansionPanels()\n    def make_panel(header, content):\n        return v.ExpansionPanel(children=\n                          [v.ExpansionPanelHeader(children=[header], class_='grey lighten-3'),\n                           v.ExpansionPanelContent(children=[widgets.HTML(markdown.markdown(content))])])\n    panels.children = [make_panel(t1,c1), make_panel(t2,c2),\n                       make_panel(t3,c3), make_panel(t4,c4),\n                       make_panel(t5,c5), make_panel(t6,c6)] \n    return v.Row(justify=\"left\", children=[panels])\n\nclass RunSQL:\n    def __init__(self, containing_box, optional_callback_with_status_df=False, event_to_set=False, should_show_results=False, needs_to_unblock=False):\n        self.containing_box = containing_box\n        self.optional_callback_with_status_df = optional_callback_with_status_df\n        self.event_to_set = event_to_set\n        self.should_show_results = should_show_results\n        self.needs_to_unblock = needs_to_unblock\n        \n    \n    def _reset(self):\n        if self.event_to_set:\n            self.event_to_set.clear()\n        operations_out = widgets.Output()\n        results_out = widgets.Output()  \n        self.containing_box.children = [operations_out, results_out]\n        sqlstatus = widgets.Textarea(\n            value='Pending',\n            placeholder='Type something',\n            description='String:',\n            disabled=False,\n        )\n        sqlstatus.layout.display='none'\n        sqlstatus.add_class('sqlstatus')\n        operations_out.append_display_data(sqlstatus)  \n\n        sqldata = widgets.Textarea(\n            value='',\n            placeholder='Type something',\n            description='String:',\n            disabled=False,\n        )\n        sqldata.layout.display='none'\n        sqldata.add_class('sqldata')\n        operations_out.append_display_data(sqldata)\n        if self.should_show_results:\n          results_out.append_stdout(\"Pending...\")\n\n        def on_value_update(el):\n            sqlstatus_value = sqlstatus.value\n            sqldata_value = sqldata.value\n            df = ''\n            if not sqlstatus_value.startswith(\"Pending\"):\n                if self.should_show_results:\n                    results_out.outputs = ()\n                    results_out.append_stdout(sqlstatus_value)\n                if not (sqlstatus_value.startswith('Error:') or sqlstatus_value.startswith(\"Pending\")):\n                    df = pd.read_json(StringIO(sqldata_value))\n                    headers = df.iloc[0].values\n                    df.columns = headers\n                    df.drop(index=0, axis=0, inplace=True)\n                    if self.should_show_results:\n                        if df.size <= 5000:\n                          results_out.append_display_data(widgets.VBox([DataGrid(df,  layout={ 'height' : '300px' }, auto_fit_columns=True)]))\n                        else:\n                          results_out.append_display_data(widgets.VBox([DataGrid(df[:5000],  layout={ 'height' : '300px' }, auto_fit_columns=True)]))\n                operations_out.outputs = ()\n                if self.optional_callback_with_status_df:\n                    self.optional_callback_with_status_df(sqlstatus_value, df)\n                if self.event_to_set:\n                    self.event_to_set.set()\n                if self.needs_to_unblock:\n                  js_command = '''\n                  window.postMessage(\n                  {\n                  notebookreact_msg_type: \"sql_finish_from_cell\", \n                  });\n                  '''\n                  self.containing_box.children[0].append_display_data(Javascript(js_command))  \n        sqlstatus.observe(on_value_update, names='value')\n        \n\n    def run_query(self, query):\n        self._reset()\n        query = re.sub(r'--(.*?)\\n','\\n',query)\n        query = query.replace('\\n', ' /* newline */ ').replace('\\\\', '\\\\\\\\')\n        isDownload = query.lstrip().startswith('!all')\n        if isDownload:\n            query = query.replace('!all', '',1)\n        js_command = '''\n        window.postMessage(\n        {\n        notebookreact_msg_type: \"sql_request_from_cell\", \n        sql_request:\"'''+query+'''\",\n        download:\"'''+str(isDownload)+'''\"\n        });\n        '''\n        self.containing_box.children[0].append_display_data(Javascript(js_command))  \n ";if(n&&"SQL"==n)i=!0,r=p+`\noutput_for_sql = widgets.VBox()\ndef callback_for_sql(status, dfin):\n     global df\n     df = dfin\ndisplay(output_for_sql)\nsql_r = RunSQL(output_for_sql, callback_for_sql, event_to_set=False, should_show_results=True, needs_to_unblock=True)\nsql_r.run_query("""${e}""")`;else{let u="\n%pip install -q requests==2.28.2 pygwalker==0.1.7\nimport pandas as pd\nimport pygwalker as pyg, pygwalker.utils.config as pyg_conf\npyg_conf.set_config({'privacy': 'offline'})\n";e.includes("pyg.walk")&&(r=u+r);let c="\n%pip install xyzservices==2023.2.0 bokeh==3.1.0\nfrom bokeh.plotting import output_notebook\nimport pandas\nimport numpy as np\noutput_notebook()\n";e.includes("import bokeh")&&(r=c+r);let _="\n%pip install ipympl==0.9.3\n%matplotlib ipympl                  \n";e.includes("import ipympl")&&(r=_+r);let h="\n%pip install seaborn==0.12.2\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n";e.includes("import seaborn")&&(r=h+r);let g="\n%pip install ipywidgets==8.0.6 ipyvuetify==1.8.4 \nimport ipywidgets as widgets\nimport ipyvuetify as v\nimport asyncio\n";e.includes("import ipywidgets")&&(r=g+r);let b="\n%pip install nbformat==5.8.0 plotly==5.14.1\nimport pandas as pd\nimport plotly.express as px\n";e.includes("import plotly")&&(r=b+r);let f="\n%pip install bqplot==0.12.39\nimport bqplot.pyplot as plt\nimport numpy as np\n";e.includes("import bqplot")&&(r=f+r);let w="\n%pip install altair=='5.0.0rc1'\nimport altair as alt\nimport pandas as pd\n";e.includes("import altair")&&(r=w+r);let v="\n%pip install ipycytoscape==1.3.3\n";e.includes("import ipycytoscape")&&(r=v+r),(e.includes("RunSQL(")||e.includes("amperity()"))&&(r=p+r)}async function d(e,t,n,a){let o=m.pushID(i);return await m.wait(o),m.popID(o),y(e,t,n,a)}l=d(r,t,a,o)}catch(k){throw k}finally{s.OutputArea.execute=y}return l}})),window.parent.postMessage({notebook_msg_type:"jupyter_is_ready"},"*")}}}}]);